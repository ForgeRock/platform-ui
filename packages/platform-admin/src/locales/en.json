{
  "routeNames": {
    "BulkImport": "Import",
    "Connect": "Connect",
    "EditApplication": "Edit Application",
    "EditRemoteServer": "Edit Remote Server",
    "EditServerCluster": "Edit Server Cluster",
    "EditServerClusterServers": "Edit Server Cluster Servers",
    "Journeys": "Journeys",
    "JourneyTree": "Journey Tree",
    "ManagedIdentity": "Manage Identity"
  },
  "sideMenu": {
    "authorizationRole": "Internal Role",
    "accessManagement": "Access Management",
    "applications": "Applications",
    "bulkImport": "Import",
    "connect": "Connect",
    "dashboard": "Dashboard",
    "selectIcon": "Please select icon in admin (Managed Object) settings",
    "provisioningRole": "External Role",
    "identities": "Identities",
    "identityManagement": "Identity Management",
    "managed": "Manage",
    "nativeConsoles": "Native Consoles",
    "settings": "Settings",
    "signOut": "Sign Out",
    "toggleSidebar": "Toggle sidebar",
    "authentication": "Authentication",
    "journeys": "Journeys",
    "policy": "Policy"
  },
  "connect": {
    "connectIdentities": "Connect Identities",
    "subtitle": "Connect remote identity sources.",
    "connectors": {
      "title": "Connectors",
      "subtitle": "Connect external identities to allow syncing of data across resources.",
      "noConnectors": "No Configured Connectors",
      "advancedOptions": "advanced options",
      "next": "Next"
    }
  },
  "application": {
    "errors": {
      "failedLogout": "Failed to logout of platform session",
      "downloadCsvImportFailureError": "There was an error downloading CSV import failures.",
      "reconDetailError": "There was an error getting recon details.",
      "importDetailError": "There was an error getting import details",
      "configDetailError": "There was an error getting configuration details",
      "fileUploadError": "There was an error uploading the file",
      "getImportsError": "There was an error getting the list of imports",
      "configUploadCsvError": "There was an error saving upload-csv config",
      "errorDeletingResource": "There was an error deleting the requested resource.",
      "errorLoadingRealm": "There was an error loading a realm",
      "errorSavingRealm": "There was an error saving realm details",
      "errorDeletingRealm": "There was an error deleting a realm",
      "errorGettingRealmAuthenticationConfig": "There was an error getting realm authentication config",
      "errorSwitchingRealm": "There was an error switching realm"
    }
  },
  "journey": {
    "title": "Journeys",
    "journeyName": "Journey Name",
    "identityResource": "Identity Object",
    "previewInputLabel": "Preview URL",
    "previewHelp": "Copy and paste into an incognito window to preview journey.",
    "usageInputLabel": "Tree ID",
    "usageHelp": "Use when configuring the <a target=\"_blank\" href=\"https://sdks.forgerock.com/\">ForgeRock SDK</a> or calling the <a target=\"_blank\"  href=\"https://backstage.forgerock.com/docs/\">REST APIs</a>.",
    "description": "Sign in users to your application using any of the out-of-the-box journeys or customize them to suit your specific requirements.",
    "newJourney": "New Journey",
    "duplicateJourney": "Duplicate Journey",
    "editJourney": "Edit Journey",
    "service": "Service",
    "duplicate": "Duplicate",
    "editDetails": "Edit Details",
    "copyOf": "Copy of {treeId}",
    "preview": "Preview",
    "journeyDeleteSuccess": "\"{treeId}\" journey successfully deleted.",
    "journeyEditSuccess": "\"{treeId}\" journey successfully updated.",
    "noJourney": "You haven't created any journeys",
    "noJourneySubtitle": "Configure journeys to allow users to sign in, register and perform self-service functions like reset their password or recover their username.",
    "noAuthServicesMessage": "Sign in users to your application by creating journeys",
    "errorRetrievingJourneys": "Error retrieving journeys",
    "errorCreatingJourney": "Error creating journey",
    "errorDuplicatingJourney": "Error duplicating journey",
    "errorUpdatingJourney": "Error updating journey",
    "errorDeletingJourney": "Error deleting journey",
    "errorRetrievingJourneyTemplate": "Error retrieving journey template",
    "errorRetrievingTableData": "Error retrieving table data",
    "unableToEditResource": "Unable to edit {resource}",
    "unableToDeleteResource": "Unable to delete {resource}",
    "filterNodes": "Filter nodes",
    "editModal": {
      "treeNameDescription": "Human-friendly name for this user flow.",
      "treeManagedIdentityDescription": "Managed identity to authenticate using this journey.",
      "treeDescriptionDescription": "Provide consumers of your flow a brief description of this flow."
    },
    "deleteModal": {
      "title": "Delete Journey?",
      "content": "Are you sure you want to delete this journey?",
      "deleteJourney": "Delete journey"
    }
  },
  "bulkImport": {
    "title": "Import Identities",
    "noDataTitle": "Bulk Import",
    "description": "Bulk import identity data from cvs files.",
    "cancelImport": "Cancel Import",
    "continueImport": "Continue Import",
    "deleteImport": "Delete Import",
    "newImport": "New Import",
    "imported": "Imported",
    "importing": "Importing",
    "users": "Users",
    "file": "File",
    "date": "Date",
    "formatCsv": "Format your CSV file (max %{maxImportSize}MB) according to this ",
    "csvTemplate": "CSV Template",
    "csvFile": "CSV File",
    "matchUsing": "Match Using",
    "matchUsingHelp": "Select one or more properties for unique record match.",
    "viewDetails": "View Details",
    "uploadingFile": "Uploading file {uploadPercentage}% complete",
    "importComplete": "Import Complete",
    "complete": "Complete",
    "error": "Error",
    "importInProgress": "Import In progress",
    "inProgress": "In progress",
    "entries": "entries",
    "inMinutes": "in %{timeElapsed} minutes",
    "inSeconds": "in %{timeElapsed} seconds",
    "inMilliseconds": "in %{timeElapsed} milliseconds",
    "failed": "Failed",
    "updated": "Updated",
    "unchanged": "Unchanged",
    "downloadCsv": "Download CSV",
    "done": "Done",
    "continue": "Continue",
    "cancelImportDescription": "Are you sure you want to cancel your import? If you cancel, pending records will not be processed.",
    "uploaded": "Uploaded",
    "importCancelled": "Import Cancelled",
    "cancelled": "Cancelled",
    "importCancelledDuringUpload": "Import cancelled during upload",
    "uploadCSV": "Upload CSV",
    "selectIdentity": "Select the managed identity object into which you want to import your CSV identities.",
    "importTo": "Import to",
    "deleteImportConfirmation": "If you delete this import the entries imported will remain, but import record will be deleted from the list."
  },
  "dashboard": {
    "createApplication": {
      "title": "Add a New Application",
      "description": "Add your application to the platform, and integrate the app with ForgeRock authentication."
    },
    "connectIdentities": {
      "title": "Connect Identities",
      "description": "Create and manage identity profiles across applications and IT infrastructure."
    },
    "managedAccess": {
      "title": "Manage Access",
      "description": "Manage how your users can authenticate and gain access to your systems."
    },
    "managedIdentities": {
      "title": "Manage Identities",
      "description": "Control where, when, and how your users can change their information."
    },
    "welcome": {
      "title": "ForgeRock Identity Platform",
      "description": "Helps your customers, workforce, and IoT identities access the connected world â€“ safely and simply.",
      "footer": "Get Started"
    }
  },
  "remoteServers": {
    "confirmDeleteRemoteServer": "Are you sure you want to delete the \"{name}\" remote server?",
    "connect": "Connect",
    "connectorName": "Connector Name",
    "connectors": "Connectors",
    "connectionDetails": "Connection Details",
    "deleteServer": "Delete Server",
    "deleteWarning": "Warning this cannot be undone!",
    "disconnect": "Disconnect",
    "errorRetrievingConnectors": "Error retrieving remote connectors.",
    "errorRetrievingList": "Error retrieving remote server list.",
    "errorRetrievingSpecificServer": "Error retrieving specified remote server.",
    "errorSaving": "Error saving remote server.",
    "errorServerExists": "Server name is already in use, please specify a different name",
    "errorNameRequired": "Server name is required",
    "hideAdvanced": "Hide advanced settings",
    "newRemoteServer": "New Remote Server",
    "noRemoteServersTitle": "No remote servers yet",
    "noRemoteServersSubtitle": "Connect to identities that live on remote servers.",
    "remoteServer": "Remote Server",
    "remoteConnectorServer": "Remote Remote Server",
    "remoteConnectorClient": "Remote Remote Client",
    "key": "Key",
    "keyDescription": "Authentication password shared between the remote server and Identity Cloud.",
    "displayName": "Name",
    "displayNameDescription": "Identifier to be displayed in the Remote Server list.",
    "useSsl": "Use SSL",
    "clientMode": "Client Mode",
    "clientModeDescription": "By default, Identity Cloud initiates connections using the remote server port.<br>In client mode, the remote connector server initiates connections to Identity Cloud using HTTP or HTTPS.",
    "host": "Host",
    "hostDescription": "Fully-qualified remote server hostname.",
    "port": "Port",
    "timeout": "Timeout",
    "proxyHost": "Proxy Host",
    "proxyHostDescription": "Fully-qualified proxy server name. Example: http://myserver.forgerock.com",
    "proxyPort": "Proxy Port",
    "proxyPassword": "Proxy Password",
    "proxyUser": "Proxy User",
    "proxyUserDescription": "Administrator or username authorized to access the proxy host.",
    "houseKeepingInterval": "House Keeping Interval",
    "houseKeepingIntervalPassword": "Number of seconds between server housekeepings.",
    "pingPongInterval": "Ping Pong Interval",
    "pingPongIntervalPassword": "Number of seconds between messages sent to keep websockets open.",
    "connectionGroupCheckInterval": "Connection Group Check Interval",
    "connectionGroupCheckIntervalPassword": "Number of seconds between pings to a connection group.",
    "webSocketConnections": "Web Socket Connections",
    "webSocketConnectionsPassword": "Number of sockets to hold open.",
    "showAdvanced": "Show advanced settings",
    "subtitle": "Enable data sync from remote on-prem servers. Cluster remote servers together to enable scaling and fallback.",
    "successDelete": "Successfully deleted remote server.",
    "successSave": "Successfully saved remote server.",
    "title": "Connect Servers",
    "type": "Type",
    "useProxy": "Use Proxy",
    "version": "Version",
    "waitingToConnect": "Waiting to connect...",
    "newServerModal": {
      "newRemoteServer": "New Remote Server",
      "serverDetails": "Server Details",
      "setupComplete": "Setup Complete",
      "server": "Server",
      "serverDescription": "ForgeRock initiates the connection to the remote server. Use this option if the remote server is not behind a firewall, or if ForgeRock is allowed direct access to the remote server through the firewall.",
      "client": "Client",
      "clientDescription": "ForgeRock waits for the remote server to initiate the connection. Use this option if the remote server is behind a firewall, and if the firewall prevents ForgeRock from directly accessing the remote server.",
      "newRemoteServerDescription": "Connecting to an identity resource involves deploying and running a piece of software on your side.",
      "selectConnectionInitiation": "Choose how the connection to the remote server should be initiated.",
      "getStartedRegisterRemoteServer": "To get started, register your remote server by providing a name and connection settings.",
      "registerRemoteServer": "Register your remote server by providing a name and connection settings.",
      "downloadRemote": "<a href='{url}' target='_blank'>Download a remote server</a> based on your needs.",
      "stepByStep": "Follow the instructions to <a href='{url}' target='_blank'>install & configure a remote server.</a>",
      "nextSteps": "Next Steps",
      "createApp": "Create an application",
      "secureConnect": "to securely connect your remote server.",
      "resetSecret": "Reset the client secret",
      "remoteServerApp": "for the remote server application.",
      "remoteServerRegistered": "Remote server registered",
      "editRemoteServer": "Edit Remote Server"
    },
    "deleteModal": {
      "title": "Delete Server?",
      "content": "Are you sure you want to delete this server?",
      "confirm": "Delete server"
    }
  },
  "serverClusters": {
    "title": "Server Clusters",
    "serverCluster": "Server Cluster",
    "servers": "Servers",
    "clients": "Clients",
    "newServerCluster": "New Server Cluster",
    "chooseClusterType": "Choose whether you are clustering connector servers operating as servers or clients.",
    "chooseLikeServers": "Choose only servers that have the same connectors installed.",
    "serverClusterDetails": "Server Cluster Details",
    "chooseServers": "Choose Servers",
    "settings": "Settings",
    "noServerClustersTitle": "No server clusters yet",
    "noServerClustersSubtitle": "Cluster connector servers to activate scaling and fallback across resources.",
    "errorRetrievingList": "Error retrieving server clusters list.",
    "algorithm": "Algorithm",
    "failover": "Failover",
    "roundRobin": "Round Robin",
    "nameDescription": "The name to display in the Server Clusters list.",
    "deleteCluster": "Delete Cluster",
    "confirmDeleteServerCluster": "Are you sure you want to delete this server cluster?",
    "confirmDeleteServer": "Are you sure you want to remove this server?",
    "deleteServer": "Remove server",
    "remoteServerCluster": "Remote Server Cluster",
    "successCreate": "Successfully created server cluster.",
    "successSave": "Successfully saved server cluster.",
    "successDelete": "Successfully deleted server cluster.",
    "removeServer": "Remove Server?",
    "deleteServerClusterQ": "Delete Server Cluster?",
    "deleteServerCluster": "Delete server cluster",
    "addServersToCluster": "Add Servers to an Existing Cluster",
    "addServers": "Add Servers",
    "selectServers": "Select any connected server to add it to the cluster.",
    "addToCluster": "Add to cluster",
    "noServers": "No Servers Available",
    "errorClusterExists": "Server Cluster name is already in use, please specify a different name",
    "errorSaving": "Error saving server cluster.",
    "createCluster": "Create Cluster",
    "uniqueError": "Name must be unique to be used as a '-' separated ID (Display Name becomes display-name)",
    "algorithmDescription": "Failover ensures that if the primary server fails, service falls back to a designated server. Round robin continuously balances the load among two or more servers."
  },
  "trees": {
    "treeSaveSuccessful": "All Changes Saved",
    "failedToGetNodeType": "Failed to gather node type details",
    "failedToUpdateNodeOutcomes": "Failed to update node type outcomes",
    "configurationRequired": "Requires Configuration",
    "editPanel": {
      "name": "Name",
      "key": "Key",
      "value": "Value",
      "none": "none",
      "minimumRequired": "At Least {minItems} Value(s) Required"
    },
    "pageNode": {
      "dragHere": "Drag nodes here"
    },
    "nodeTypeList": {
      "failedNodeTypeList": "Failed to get available node types",
      "title": "Nodes",
      "toggleNodeList": "Toggle Node List",
      "deleteSelectedNode": "Delete Selected Node"
    },
    "toolbar": {
      "autoLayout": "Auto Layout",
      "fullscreen": "Toggle Fullscreen"
    }
  },
  "components": {
    "noData": "No group data provided"
  },
  "pages": {
    "app": {
      "notifications": {
        "noNotifications": "No notifications available",
        "title": "Notifications"
      }
    },
    "identities": {
      "managedIdentities": "Manage Identities",
      "subTitle": "Create and configure ForgeRock-hosted identity resources.",
      "deleteResource": {
        "title": "Delete {resource}?",
        "body": "Are you sure you want to delete this {resource}?",
        "primaryButton": "Delete {resource}"
      }
    }
  },
  "passwordPolicy": {
    "title": "Password Policy",
    "subtitle": "Define password rules for identities.",
    "managedError": "Error retrieving managed objects",
    "passwordLength": "Password length",
    "minLength": "Minimum",
    "maxLength": "and maximum 64 characters",
    "cannotInclude": "Cannot include",
    "restrictRepetitive": "Repetitive characters (e.g. aaaa)",
    "restrictCommon": "Commonly used passwords (e.g. p@ssw0rd, etc.)",
    "restrictAttributes": "Part of {resourceName} attributes",
    "restrictAttributesPlaceholder": "Forbidden {resourceName} attributes",
    "mustContain": "Must contain",
    "reqUpper": "Upper case letter (English)",
    "reqLower": "Lower case letter (English)",
    "reqNumber": "Number (0-9)",
    "reqSymbol": "Symbol (e.g., !@#$%^&*)",
    "restrictForbiddenPlaceholder": "Forbidden characters",
    "cannotReuse": "Cannot reuse",
    "last": "Last",
    "passwords": "passwords",
    "forcePasswordChange": "Force Password Change",
    "after": "After",
    "days": "days",
    "months": "months",
    "years": "years",
    "updateSuccess": "Updated {resourceName} password policy successfully",
    "updateFailed": "Error updating {resourceName} password policy"
  },
  "applications": {
    "application": "Application",
    "listView": {
      "addApp": "Add Application",
      "tableEmpty": "No available applications",
      "app": "Application",
      "title": "Applications",
      "subTitle": "Set up your applications to use ForgeRock authentication.",
      "active": "Active",
      "inactive": "Inactive",
      "name": "Name"
    },
    "addAppModal": {
      "appClientId": "Client ID",
      "chooseAppType": "Choose an application type",
      "enterprise": "Enterprise",
      "enterpriseHelpText": "Set up SSO to an application like Google, Salesforce, or Office365",
      "consumer": "Consumer",
      "consumerHelpText": "Integrate authentication with your web, native, or service app",
      "consumerAppType": "Choose a consumer application type",
      "nativeTitle": "Native / SPA",
      "nativeExample": "iOS, Android, React",
      "webTitle": "Web",
      "webExample": "Node.js, Java",
      "serviceTitle": "Service",
      "serviceExample": "Machine-to-machine",
      "createCredentials": "Create a client ID for your application.",
      "createCredentialsWithSecret": "Create a client ID and secret for your application.",
      "alphaNumericOnly": "Can only contain alphanumeric characters",
      "alphaNumericDashOnly": "Can only contain alphanumeric characters, numbers, dashes or underscores",
      "noSpace": "Cannot start or end with the space character",
      "createApp": "Create Application",
      "defaultModalTitle": "New Application",
      "appTypeModalTitle": "New %{appType} App",
      "consumerAppModalTitle": "%{appType} Application Credentials",
      "errorCreatingApp": "Could not create application",
      "clientSecretWarning": "Make sure you copy <small class=\"text-monospace alert-link\">Client Secret</small> as it won't be shown again."
    }
  },
  "oauth": {
    "editApp": {
      "schemaFail": "Unable to get application properties",
      "updateSuccess": "Application updated",
      "updateFail": "Application update failed",
      "deleteFail": "Unable to delete application",
      "resetSecretSuccess": "Client secret reset",
      "resetSecretFail": "Unable to reset client secret"
    },
    "listApps": {
      "getAppDataFail": "Unable to retrieve applications data",
      "deleteAppFail": "Unable to delete application",
      "noDataTitle": "You haven't added any applications yet",
      "noDataSubtitle": "Set up an application to use ForgeRock authentication."

    },
    "nativeApp": {
      "super": "Native / SPA",
      "newApp": "New App"
    },
    "webApp": {
      "super": "Web Application"
    },
    "serviceApp": {
      "super": "Service Application"
    },
    "accessTab": {
      "title": "Access",
      "defaultScopesLabel": "Default Scopes",
      "defaultScopesHelp": "Scopes automatically given to tokens.",
      "responseTypesLabel": "Response Types",
      "responseTypesHelp": "Response types this client will support and use.",
      "claimsLabel": "Claims",
      "claimsHelp": "List of claim name translations, which will override those specified for the authorization server. Claims are values that are presented to the user to inform them what data is being made available to the Client.",
      "loopbackInterfaceRedirectionLabel": "Allow wildcard ports in redirect URLs",
      "loopbackInterfaceRedirectionHelp": "This flag indicates whether wildcards can be used for port numbers in redirect URIs. For example - <code>https://127.0.0.1:{port}/{path}</code> for IPv4 and <code>https://[::1]:{port}/{path}</code> for IPv6."
    },
    "authenticationTab": {
      "title": "Authentication",
      "tokenEndpointAuthMethodLabel": "Token Endpoint Authentication Method",
      "tokenEndpointAuthMethodHelp": "The authentication method with which a client authenticates to the authorization server at the token endpoint. The authentication method applies to OIDC requests with the openid scope.",
      "clientTypeLabel": "Client Type",
      "clientTypeHelp": "Type of OAuth 2.0 client. Confidential clients can keep their password secret, and are typically web apps or other server-based clients. Public clients run the risk of exposing their password to a host or user agent, such as rich browser applications or desktop clients.",
      "isConsentImpliedLabel": "Implied Consent",
      "isConsentImpliedHelp": "When active, the resource owner will not be asked for consent during authorization flows. The OAuth2 Provider must be configured to allow clients to skip consent.",
      "mixUpMitigationLabel": "OAuth 2.0 Mix-Up Mitigation active",
      "mixUpMitigationHelp": "Enables OAuth 2.0 mix-up mitigation on the authorization server side. Enable this setting only if this OAuth 2.0 client supports the OAuth 2.0 Mix-Up Mitigation draft, otherwise AM will fail to validate access token requests received from this client.",
      "defaultAcrValuesLabel": "Default ACR values",
      "defaultAcrValuesHelp": "Default requested Authentication Context Class Reference values.",
      "requestUrisLabel": "Request URIs",
      "requestUrisHelp": "Array of request_uri values that are pre-registered by the RP for use at the OP.",
      "clientJwtPublicKeyLabel": "Client JWT Bearer Public Key",
      "subjectTypeLabel": "Subject Type",
      "subjectTypeHelp": "The subject type added to responses for this client.",
      "defaultMaxAgeEnabledLabel": "Default Max Age",
      "defaultMaxAgeEnabledHelp": "Whether or not the default max age is enforced.",
      "defaultMaxAgeLabel": "Default Max Age",
      "mTLSCertificateBoundAccessTokensLabel": "Use Certificate-Bound Access Tokens",
      "mTLSTrustedCertLabel": "mTLS Self-Signed Certificate",
      "mTLSTrustedCertHelp": "Self-signed PEM-encoded X.509 certificate for mTLS client certificate authentication.",
      "mTLSSubjectDNLabel": "mTLS Subject DN",
      "mTLSSubjectDNHelp": "Expected Subject DN of certificate used for mTLS client certificate authentication. Defaults to CN=client_id. Only applicable when using CA-signed certificates."
    },
    "clientManagementTab": {
      "title": "Client Management",
      "updateAccessTokenLabel": "Access Token",
      "updateAccessTokenHelp": "The access token used to update the client."
    },
    "consentScreenTab": {
      "title": "Consent Screen",
      "nameLabel": "Display Name",
      "nameHelp": "A client name that may be relevant to the resource owner when considering approval.",
      "descriptionsLabel": "Display Description",
      "descriptionsHelp": "A description of the client or other information that may be relevant to the resource owner when considering approval.",
      "policyUriLabel": "Privacy Policy URI",
      "policyUriHelp": "The URI for the client's privacy policy, for use in user-facing consent pages."
    },
    "endpointResponseFormatsTab": {
      "title": "Endpoint Response Formats",
      "userinfoResponseFormatLabel": "User info response format",
      "userinfoResponseFormatHelp": "The user info endpoint offers different output format. See <a href='http://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse'>http://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse</a>",
      "tokenIntrospectionResponseFormatLabel": "Token Introspection Response Format",
      "tokenIntrospectionResponseFormatHelp": "The token introspection endpoint offers different output format. see <a href='https://tools.ietf.org/html/draft-ietf-oauth-jwt-introspection-response-03'>https://tools.ietf.org/html/draft-ietf-oauth-jwt-introspection-response-03</a>"
    },
    "sessionManagementTab": {
      "title": "Session Management",
      "clientSessionUriLabel": "Client Session URI",
      "clientSessionUriHelp": "This is the URI that will be used to check messages sent to the session management endpoints. This URI must match the origin of the message."
    },
    "signingAndEncryptionTab": {
      "title": "Signing and Encryption",
      "publicKeyLocationLabel": "Public key selector",
      "publicKeyLocationHelp": "Select the public key for this client to come from either the jwks_uri, manual jwks or X509 field.",
      "jwksUriLabel": "Json Web Key URI",
      "jwksUriHelp": "The uri that contains the client's public keys in Json Web Key format.",
      "jwkSetLabel": "Json Web Key",
      "jwkSetHelp": "Raw JSON Web Key value containing the client's public keys.",
      "idTokenPublicEncryptionKeyLabel": "Client ID Token Public Encryption Key",
      "idTokenPublicEncryptionKeyHelp": "A Base64 encoded public key for encrypting ID Tokens.",
      "idTokenEncryptionEnabledLabel": "Enable ID Token Encryption"
    },
    "tokenLifetimesTab": {
      "title": "Token Lifetimes",
      "authorizationCodeLifetimeLabel": "Authorization code lifetime (seconds)",
      "accessTokenLifetimeLabel": "Access token lifetime (seconds)",
      "refreshTokenLifetimeLabel": "Refresh token lifetime (seconds)",
      "jwtTokenLifetimeLabel": "JWT token lifetime (seconds)"
    },
    "clientCredentials": {
      "cardTitle": "Client Credentials",
      "discoveryURILabel": "Discovery URI",
      "clientIDLabel": "Client ID",
      "userpasswordLabel": "Client Secret",
      "copySuccess": "Copied to your clipboard",
      "copyFail": "Failed to copy"
    },
    "generalSettings": {
      "showAdvanced": "{stateText} advanced settings",
      "footerButtonText": "Try it out",
      "cardTitle": "General Settings",
      "clientNameLabel": "Name",
      "descriptionsLabel": "Description",
      "redirectionUrisLabel": "Sign-in URLs",
      "redirectionUrisHelp": "Whitelist for sign-in redirect URLs. eg. http://www.example.com/signin",
      "postLogoutRedirectUriLabel": "Sign-out URLs",
      "postLogoutRedirectUriHelp": "Whitelist for sign-out redirect URLs. eg. http://www.example.com/signout",
      "grantTypesLabel": "Grant Types",
      "grantTypesHelp": "Authorization Code is required for SPA/Native apps.",
      "scopesLabel": "Scopes",
      "scopesHelp": "Scopes are strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
      "logoUriLabel": "App Logo URI",
      "logoUriHelp": "Application logo URI for use in user-facing UIs such as consent pages and application pages."
    },
    "deleteAppModal": {
      "deleteApp": "Delete Application",
      "modalText": "Are you sure you want to delete {appName}?"
    }
  },
  "realm": {
    "title": "Realm",
    "saveRealm": "Save Realm",
    "deleteRealm": "Delete Realm",
    "topLevelRealm": "Top Level Realm",
    "switchLink": "Switch",
    "switchRealm": "Switch realm...",
    "switchRealmModal": "Switch Realm",
    "switchSuccessful": "Successfully switched realm to '{realmName}'",
    "searchRealms": "Search realms...",
    "searchRealmsNoMatch": "There are no realms available.",
    "newRealm": "New Realm",
    "realmSettings": "Realm Settings",
    "dnsAliases": "DNS Aliases (optional)",
    "dnsAliasesDescription": "List of fully-qualified DNS aliases for the realm.",
    "useClientBasedSessions": "Use Client-based Sessions",
    "useClientBasedSessionsDescription": "Client-based sessions provide elastic scalability by storing all session state as a JWT in a cookie stored on the client. It is highly recommended to enable signing and encryption of the JWT in the global session service.",
    "successfullyCreated": "'{realmName}' realm successfully created",
    "successfullyDeleted": "'{realmName}' realm successfully deleted",
    "successfullySaved": "'{realmName}' realm successfully saved",
    "typeToAddDnsAlias": "Type and press enter to add a DNS alias",
    "Status": "Status",
    "active": "Active",
    "inactive": "Inactive",
    "activate": "Activate",
    "deactivate": "Deactivate",
    "deactivateModalTitle": "Deactivate Realm?",
    "deactivateModalText": "If you deactivate this realm users will be prevented from signing in. Are you sure you want to deactivate this realm?",
    "deleteModalTitle": "Delete Realm?",
    "activeRealmMessage": "This is an active realm. All configuration data will be lost if deleted. You can set the realm as inactive to prevent login but retain configuration data.",
    "deleteModalText2": "Are you sure you want to permanently delete this realm?",
    "deleteModalText3": "This action cannot be undone.",
    "yesDeleteRealm": "Yes, Delete Realm"
  },
  "logApiKeys": {
    "noLogApiKeysText": "You haven't added any log API keys",
    "logApiKeyDescription": "Send log data to third party services like Splunk or LogStash.",
    "logAPIKeySectionTitle": "Log API Keys",
    "getApiKeyDataFail": "Unable to retrieve API key data",
    "deleteApiKeyFail": "Unable to delete API key",
    "createApiKey": "New Log API Key",
    "apiKeyName": "Name",
    "apiKeyId": "api_key_id",
    "apiKeyCreated": "Created",
    "deleteApiKeyModal": {
      "modalHeader": "Delete Log API Key?",
      "modalText": "Are you sure you want to delete this log API key?",
      "deleteButtonText": "Delete Log API Key"
    },
    "createApiKeyModal": {
      "nameDescription": "Human-readable name for your key",
      "createButtonText": "Create key",
      "creatingButtonText": "Creating key...",
      "errorCreatingKey": "Could not create API key",
      "keySecret": "api_key_secret",
      "createSuccessHeader": "Key successfully created!",
      "oneTimeSecretStatement": "Make sure you copy <code>api_key_secret</code> below as it won't be shown again.",
      "checkIconAltText": "Success icon"
    }
  },
  "email": {
    "inviteAdmin": {
      "successHeader": "Your invitation(s) has been sent!",
      "successCountMessage": "Youâ€™ve invited {count} admin(s)",
      "partialSuccessMessage": "Youâ€™ve invited {totalCount} admin(s), but {failCount} invitation(s) didn't send. Review the below errors.",
      "noSuccessMessage": "{count} invitation(s) didn't send. Review the errors below.",
      "notice": "IMPORTANT: Each invited admin will receive an email to setup their admin account and have the permission to fully administer this organization.",
      "toCompany": "to {company}",
      "emailAddresses": "Email addresses",
      "inviteAdminsTitle": "Invite Admins",
      "invitationSentTitle": "Invitations Sent!",
      "partialSuccessTitle": "Partial Success",
      "oopsTitle": "Oops, That Didn't Work",
      "sendInvite": "Send Invitations",
      "inviteMore": "Invite More People",
      "tryAgain": "Try Again",
      "invitedMembers": "Invited Members",
      "notInvited": "Not Invited",
      "errorAdminOnboarding": "There was an issue onboarding admin",
      "errorUnique": "This person already exists in your tenant."
    }
  },
  "tenantSettings": {
    "title": "Tenant Settings",
    "globalSettings": {
      "title": "Global Settings",
      "getDataFail": "Unable to retrieve global settings data",
      "server": {
        "title": "Server",
        "cookieName": "Cookie Name"
      }
    }
  }
}
