// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterBuilderGroup Creates object to add a rule: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: (deprecation RENDER_FUNCTION) Vue 3's render function API has changed. You can opt-in to the new API with:

  configureCompat({ RENDER_FUNCTION: false })

  (This can also be done per-component via the "compatConfig" option.)
  Details: https://v3-migration.vuejs.org/breaking-changes/render-function-api.html",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation GLOBAL_EXTEND) (2)",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation COMPONENT_FUNCTIONAL) Functional component <BCard> should be defined as a plain function in Vue 3. The "functional" option has been removed. NOTE: Before migrating to use plain functions for functional components, first make sure that all async components usage have been migrated and its compat behavior has been disabled.
  Details: https://v3-migration.vuejs.org/breaking-changes/functional-components.html",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation INSTANCE_LISTENERS) vm.$listeners has been removed. In Vue 3, parent v-on listeners are included in vm.$attrs and it is no longer necessary to separately use v-on="$listeners" if you are already using v-bind="$attrs". (Note: the Vue 3 behavior only applies if this compat config is disabled)
  Details: https://v3-migration.vuejs.org/breaking-changes/listeners-removed.html",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation COMPONENT_V_MODEL) v-model usage on component has changed in Vue 3. Component that expects to work with v-model should now use the "modelValue" prop and emit the "update:modelValue" event. You can update the usage and then opt-in to Vue 3 behavior on a per-component basis with \`compatConfig: { COMPONENT_V_MODEL: false }\`.
  Details: https://v3-migration.vuejs.org/breaking-changes/v-model.html",
    "
",
    " at <FrField",
    "modelValue="co"",
    "onUpdate:modelValue=fn",
    "class="d-inline-flex"",
    " ...",
    ">",
  ],
  [
    "[Vue warn]: (deprecation GLOBAL_EXTEND) (3)",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation COMPONENT_FUNCTIONAL) (2)",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation INSTANCE_LISTENERS) (2)",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation INSTANCE_LISTENERS) (3)",
    "
",
    " at <FrField",
    "class="d-inline-flex"",
    "name="defaultOperatorOptions"",
    "type="select"",
    " ...",
    ">",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation WATCH_ARRAY) (2)",
    "
",
    " at <SelectInput",
    "name="defaultOperatorOptions"",
    "type="select"",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <FrField",
    "class="d-inline-flex"",
    "name="defaultOperatorOptions"",
    "type="select"",
    " ...",
    ">",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation WATCH_ARRAY) (3)",
    "
",
    " at <VueMultiselect",
    "id="floatingLabelInput7"",
    "ref="vms"",
    "value=""",
    " ...",
    ">",
    "
",
    " at <InputLayout",
    "id="floatingLabelInput7"",
    "name="defaultOperatorOptions"",
    "description=""",
    " ...",
    ">",
    "
",
    " at <SelectInput",
    "name="defaultOperatorOptions"",
    "type="select"",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <FrField",
    "class="d-inline-flex"",
    "name="defaultOperatorOptions"",
    "type="select"",
    " ...",
    ">",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "appear" with v-bind value \`false\` will render appear="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <Transition",
    "name="multiselect__loading"",
    ">",
    "
",
    " at <VueMultiselect",
    "id="floatingLabelInput7"",
    "ref="vms"",
    "value=""",
    " ...",
    ">",
    "
",
    " at <InputLayout",
    "id="floatingLabelInput7"",
    "name="defaultOperatorOptions"",
    "description=""",
    " ...",
    ">",
    "
",
    " at <SelectInput",
    "name="defaultOperatorOptions"",
    "type="select"",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <FrField",
    "class="d-inline-flex"",
    "name="defaultOperatorOptions"",
    "type="select"",
    " ...",
    ">",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "persisted" with v-bind value \`false\` will render persisted="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <Transition",
    "name="multiselect__loading"",
    ">",
    "
",
    " at <VueMultiselect",
    "id="floatingLabelInput7"",
    "ref="vms"",
    "value=""",
    " ...",
    ">",
    "
",
    " at <InputLayout",
    "id="floatingLabelInput7"",
    "name="defaultOperatorOptions"",
    "description=""",
    " ...",
    ">",
    "
",
    " at <SelectInput",
    "name="defaultOperatorOptions"",
    "type="select"",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <FrField",
    "class="d-inline-flex"",
    "name="defaultOperatorOptions"",
    "type="select"",
    " ...",
    ">",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "disabled" with v-bind value \`false\` will render disabled="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <FrField",
    "class="d-inline-flex"",
    "name="defaultOperatorOptions"",
    "type="select"",
    " ...",
    ">",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "searchable" with v-bind value \`false\` will render searchable="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <FrField",
    "class="d-inline-flex"",
    "name="defaultOperatorOptions"",
    "type="select"",
    " ...",
    ">",
    "
",
    " at <BCardBody",
    "bodyBgVariant=undefined",
    "bodyBorderVariant=undefined",
    "bodyClass="p-0"",
    " ...",
    ">",
    "
",
    " at <BCard",
    "class="shadow-none border-0"",
    "body-class="p-0"",
    ">",
    "
",
    " at <FilterBuilderGroup",
    "conditionOptions=",
    {
      "Contains": {
        "label": "contains",
        "type": [
          "string",
        ],
        "value": "co",
      },
      "DoesNotContain": {
        "label": "does not contain",
        "type": [
          "string",
        ],
        "value": "!co",
      },
      "DoesNotStartsWith": {
        "label": "does not start with",
        "type": [
          "string",
        ],
        "value": "!sw",
      },
      "Gt": {
        "label": "GT (>)",
        "type": [
          "number",
        ],
        "value": "gt",
      },
      "Gte": {
        "label": "GTE (>=)",
        "type": [
          "number",
        ],
        "value": "ge",
      },
      "Is": {
        "label": "is ",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "eq",
      },
      "IsNot": {
        "label": "is not",
        "type": [
          "string",
          "number",
        ],
        "value": "!eq",
      },
      "IsNotPresent": {
        "label": "is not present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "!pr",
      },
      "IsPresent": {
        "label": "is present",
        "type": [
          "string",
          "number",
          "boolean",
        ],
        "value": "pr",
      },
      "Lt": {
        "label": "LT (<)",
        "type": [
          "number",
        ],
        "value": "lt",
      },
      "Lte": {
        "label": "LTE (<=)",
        "type": [
          "number",
        ],
        "value": "le",
      },
      "StartsWith": {
        "label": "starts with",
        "type": [
          "string",
        ],
        "value": "sw",
      },
    },
    "depth=0",
    "disabled=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;
