// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListOfObjects Add button disabled if field is disabled: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;

exports[`ListOfObjects Generates an uuid as a name for the useField method: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "value=",
    [
      {
        "test": "test",
      },
    ],
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: Property "name" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "value=",
    [
      {
        "test": "test",
      },
    ],
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;

exports[`ListOfObjects If all fields are empty or null, remove the object: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "label="test"",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testtwo": {
        "title": "testtwo",
        "type": "string",
      },
    },
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;

exports[`ListOfObjects ListOfObjects adds empty elements to list: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation GLOBAL_EXTEND) (2)",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation COMPONENT_V_MODEL) v-model usage on component has changed in Vue 3. Component that expects to work with v-model should now use the "modelValue" prop and emit the "update:modelValue" event. You can update the usage and then opt-in to Vue 3 behavior on a per-component basis with \`compatConfig: { COMPONENT_V_MODEL: false }\`.
  Details: https://v3-migration.vuejs.org/breaking-changes/v-model.html",
    "
",
    " at <BFormCheckbox",
    "modelValue=false",
    "onUpdate:modelValue=fn<onUpdateModelValue>",
    "disabled=undefined",
    " ...",
    ">",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "checked" with v-bind value \`false\` will render checked="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "autofocus" with v-bind value \`false\` will render autofocus="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "disabled" with v-bind value \`false\` will render disabled="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "required" with v-bind value \`false\` will render required="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "plain" with v-bind value \`false\` will render plain="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "button" with v-bind value \`false\` will render button="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "inline" with v-bind value \`false\` will render inline="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "indeterminate" with v-bind value \`false\` will render indeterminate="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "switch" with v-bind value \`false\` will render switch="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "uncheckedValue" with v-bind value \`false\` will render uncheckedValue="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <BFormCheckbox",
    "disabled=undefined",
    "name="testPropertyKey_0_16"",
    "onChange=fn",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;

exports[`ListOfObjects ListOfObjects checks if field is valid: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "testPropertyKey": {
        "title": "testPropertyKey",
        "type": "array",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation INSTANCE_LISTENERS) vm.$listeners has been removed. In Vue 3, parent v-on listeners are included in vm.$attrs and it is no longer necessary to separately use v-on="$listeners" if you are already using v-bind="$attrs". (Note: the Vue 3 behavior only applies if this compat config is disabled)
  Details: https://v3-migration.vuejs.org/breaking-changes/listeners-removed.html",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "testPropertyKey": {
        "title": "testPropertyKey",
        "type": "array",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "readOnly" with v-bind value \`false\` will render readOnly="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <FrInlineJsonEditor",
    "language="json"",
    "line-count=1",
    "read-only=false",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "testPropertyKey": {
        "title": "testPropertyKey",
        "type": "array",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;

exports[`ListOfObjects ListOfObjects removes elements from list: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "ref="VTU_COMPONENT"",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;

exports[`ListOfObjects ListOfObjects sets listValues and converts to array when there is an object value: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "multiValued=false",
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;

exports[`ListOfObjects ListOfObjects sets listValues when there is an array value: console-warn-snapshot 1`] = `
[
  [
    "[Vue warn]: (deprecation RENDER_FUNCTION) Vue 3's render function API has changed. You can opt-in to the new API with:

  configureCompat({ RENDER_FUNCTION: false })

  (This can also be done per-component via the "compatConfig" option.)
  Details: https://v3-migration.vuejs.org/breaking-changes/render-function-api.html",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation WATCH_ARRAY) (2)",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "value=",
    [
      {
        "test": "test",
      },
    ],
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: Property "description" was accessed during render but is not defined on instance.",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "value=",
    [
      {
        "test": "test",
      },
    ],
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
  [
    "[Vue warn]: (deprecation ATTR_FALSE_VALUE) Attribute "canEnterPlaceholders" with v-bind value \`false\` will render canEnterPlaceholders="false" instead of removing it in Vue 3. To remove the attribute, use \`null\` or \`undefined\` instead. If the usage is intended, you can disable the compat behavior and suppress this warning with:

  configureCompat({ ATTR_FALSE_VALUE: false })

  Details: https://v3-migration.vuejs.org/breaking-changes/attribute-coercion.html",
    "
",
    " at <FrField",
    "value="test"",
    "onInput=fn<onInput>",
    "disabled=undefined",
    " ...",
    ">",
    "
",
    " at <ListOfObjects",
    "properties=",
    {
      "test": {
        "title": "test",
        "type": "string",
      },
      "testPropertyKey": {
        "title": "testPropertyValue",
        "type": "boolean",
      },
    },
    "label="test"",
    "value=",
    [
      {
        "test": "test",
      },
    ],
    " ...",
    ">",
    "
",
    " at <VTUROOT>",
  ],
]
`;
